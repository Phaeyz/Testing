name: ~Lib~ Build

on:
  workflow_call:
    inputs:
      dotnet-version:
        type: string
        default: '9.0.x'
      publish-output:
        type: string
        default: './publish'
      package-name:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        filter: tree:0

    - name: Print Derived Version
      run: |
        # Version tags must follow this pattern
        REGEX='^[0-9]+\.[0-9]+(\.[0-9]+)?'
        # Function to filter and validate tags
        validate_tags() {
          while read TAG; do
            if [[ $TAG =~ $REGEX ]]; then
              echo $TAG
            fi
          done
        }
        # Find the most recent commit with tags and iterate until a valid version tag is found
        SKIP=0
        while true; do
          COMMIT=$(git rev-list --tags --skip=$SKIP --max-count=1)
          if [ -z "$COMMIT" ]; then
            echo "A SKIP=$SKIP"
            break
          fi
          VERSION_TAGS=$(git tag --contains $COMMIT | validate_tags)
          echo "B2 SKIP=$SKIP COMMIT=$COMMIT VERSION_TAGS=$VERSION_TAGS"
          if [ -n "$VERSION_TAGS" ]; then
            echo "C SKIP=$SKIP COMMIT=$COMMIT"
            break
          fi
          SKIP=$((SKIP + 1))
          echo "D SKIP=$SKIP COMMIT=$COMMIT"
        done
        # Ensure TAGS is defined before processing
        HIGHEST_VERSION_TAG="0.0.0"
        if [ -n "$VERSION_TAGS" ]; then
          echo "E SKIP=$SKIP COMMIT=$COMMIT VERSION_TAGS=$VERSION_TAGS"
          # Find the highest version tag
          for VERSION_TAG in $VERSION_TAGS; do
            echo "E SKIP=$SKIP COMMIT=$COMMIT VERSION_TAG=$VERSION_TAG"
            # Compare current tag with highest tag
            if [ "$(printf '%s\n' "HIGHEST_VERSION_TAG" "$VERSION_TAG" | sort -V | tail -n1)" = "$VERSION_TAG" ]; then
              HIGHEST_VERSION_TAG="$VERSION_TAG"
              echo "F SKIP=$SKIP COMMIT=$COMMIT VERSION_TAG=$VERSION_TAG HIGHEST_VERSION_TAG=$HIGHEST_VERSION_TAG"
            fi
          done
        fi
        echo "Highest tag: $HIGHEST_VERSION_TAG"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-restore

    - name: Publish
      run: dotnet publish --no-restore --output ${{ inputs.publish-output }} ./${{ inputs.package-name }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package-name }}
        path: ${{ inputs.publish-output }}