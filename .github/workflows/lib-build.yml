name: ~Lib~ Build

on:
  workflow_call:
    inputs:
      dotnet-version:
        type: string
        default: '9.0.x'
      publish-output:
        type: string
        default: './publish'
      package-name:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MinVerVerbosity: normal

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        filter: tree:0

    - name: Print Derived Version
      run: |
        # Version tags must follow this pattern
        REGEX='^[0-9]+\.[0-9]+(\.[0-9]+)?'
        # Function to filter and validate tags
        validate_tags() {
          while read TAG; do
            if [[ $TAG =~ $REGEX ]]; then
              echo $TAG
            fi
          done
        }
        # Find the most recent commit with tags and iterate until a valid version tag is found
        SKIP=0
        while true; do
          COMMIT=$(git rev-list --tags --skip=$SKIP --max-count=1)
          if [ -z "$COMMIT" ]; then
            break
          fi
          VERSIONS=$(git tag --contains $COMMIT | validate_tags)
          if [ -n "$VERSIONS" ]; then
            break
          fi
          SKIP=$((SKIP + 1))
        done
        # Ensure VERSIONS is defined before processing
        HIGHEST_VERSION="0.0.0"
        if [ -n "$VERSIONS" ]; then
          # Find the highest version
          for VERSION in $VERSIONS; do
            # Compare current version with highest version
            if [ "$(printf '%s\n' "$HIGHEST_VERSION" "$VERSION" | sort -V | tail -n1)" = "$VERSION" ]; then
              HIGHEST_VERSION="$VERSION"
            fi
          done
        fi
        echo "Highest version: $HIGHEST_VERSION"

    - name: Install MinVer CLI
      run: dotnet tool install --global minver-cli

    - name: MinVer Help
      run: minver --help
      env:
        MinVerVerbosity: info

    - name: Compute Version
      id: compute_version
      run: |
        version=$(minver -v info | tail -n 1)
        echo "Computed version: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
      env:
        MinVerVerbosity: info

    - name: Display Computed Version
      run: echo "Computed version is ${{ steps.compute_version.outputs.version }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Install Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-restore

    - name: Publish
      run: dotnet publish --no-restore --output ${{ inputs.publish-output }} ./${{ inputs.package-name }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package-name }}
        path: ${{ inputs.publish-output }}